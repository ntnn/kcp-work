# example payload
# {
#   "iss": "https://127.0.0.1:5556/dex",
#   "sub": "CiQ5NjI0ODY1Ni1kNGQzLTQwZjAtOGVmMC0xNTQyN2E2NmQyMjMSCW1pY3Jvc29mdA",
#   "aud": "kcp",
#   "exp": 1747470001,
#   "iat": 1747383601,
#   "at_hash": "t1kTm7mtOGgIiD3nxXar_Q",
#   "c_hash": "EmNpDGxyG-t_ot1E01VgWQ",
#   "email": "n.wallus@sap.com",
#   "email_verified": true,
#   "name": "Wallus, Nelo-Thara"
# }
# See https://kubernetes.io/docs/reference/access-authn-authz/authentication/#configuring-the-api-server
apiVersion: apiserver.config.k8s.io/v1beta1
kind: AuthenticationConfiguration
# list of authenticators to authenticate Kubernetes users using JWT compliant tokens.
# the maximum number of allowed authenticators is 64.
jwt:
- issuer:
    # url must be unique across all authenticators.
    # url must not conflict with issuer configured in --service-account-issuer.
    url: https://127.0.0.1:5556/dex # Same as --oidc-issuer-url.
    # discoveryURL, if specified, overrides the URL used to fetch discovery
    # information instead of using "{url}/.well-known/openid-configuration".
    # The exact value specified is used, so "/.well-known/openid-configuration"
    # must be included in discoveryURL if needed.
    #
    # The "issuer" field in the fetched discovery information must match the "issuer.url" field
    # in the AuthenticationConfiguration and will be used to validate the "iss" claim in the presented JWT.
    # This is for scenarios where the well-known and jwks endpoints are hosted at a different
    # location than the issuer (such as locally in the cluster).
    # discoveryURL must be different from url if specified and must be unique across all authenticators.
    # discoveryURL: https://discovery.example.com/.well-known/openid-configuration
    # PEM encoded CA certificates used to validate the connection when fetching
    # discovery information. If not set, the system verifier will be used.
    # Same value as the content of the file referenced by the --oidc-ca-file flag.
    certificateAuthority: |
      -----BEGIN CERTIFICATE-----
      MIIDSzCCAjOgAwIBAgIUOLNZe6/d2/vEEz9pSZfBjFpiLyAwDQYJKoZIhvcNAQEL
      BQAwFjEUMBIGA1UEAwwLRWFzeS1SU0EgQ0EwHhcNMjUwNTE0MTYxNjM5WhcNMzUw
      NTEyMTYxNjM5WjAWMRQwEgYDVQQDDAtFYXN5LVJTQSBDQTCCASIwDQYJKoZIhvcN
      AQEBBQADggEPADCCAQoCggEBAJ5ufpwWRSUaPZA+ZnVUvTrjXfL0Km8Dzyf3tPk3
      wmj4mWAW3PbJx22lT1i5pO3IQFwGWObrGREXC9tW3XsZOe6gLtG62xDRySPcbuWO
      MXnOp5licDBVJG/+hd0GBYm2RA9UeVM7WWh4Lj2f6KBfxuZb6uJsSo/p2mz8WCO2
      7CXsMGApcYfzXowX2FvDDY79GBRVHY2Eko7OhNrlh+m9H9bb2swbGMZaojJDLsSf
      Wb8pr7pfIzLvLZkmsj4jyS9CiWzFC8kGA8839Aaa3PV1dQh8BsHeHIOhyyoWcYt1
      d73aLXukSJCKYbbtCUf3HFLUXP5RjU6g8rjdZeqq/t1EsoUCAwEAAaOBkDCBjTAM
      BgNVHRMEBTADAQH/MB0GA1UdDgQWBBTI3kKrdKHTikya2n1ksJvgPMzpCzBRBgNV
      HSMESjBIgBTI3kKrdKHTikya2n1ksJvgPMzpC6EapBgwFjEUMBIGA1UEAwwLRWFz
      eS1SU0EgQ0GCFDizWXuv3dv7xBM/aUmXwYxaYi8gMAsGA1UdDwQEAwIBBjANBgkq
      hkiG9w0BAQsFAAOCAQEAaSY/xsKby+JPJuu4OVv3n1aaEvR4MUATeRGVbtNnjAny
      ONfSFmSx/YwCPh+rHpT2vaYtXb4HQL1c8E9nPsbt4nKeB+6Knanp2nzPkYbir9Xb
      G6wKftuFjTFFPZazKz47apM80nuRWl609Htuz+XUNdl0D24eG4CR0FlU6Yo2AWaw
      MTMOLxbSsXKaPRpOKaLCrQcKg+eKRQ4Jt3KD50tucuXWgnbxagjSWMWNpPpAn5Bw
      JBh+fWTUg2gt13FSh8Ulw6m0yTD4f44tsg8WHcw8UGo2yirtZMZ1PZYqcXfcxPr4
      wUNqfgk7pwvHWD3ja21BQj4+Xo3w+A50gbXHST9LdA==
      -----END CERTIFICATE-----
    # audiences is the set of acceptable audiences the JWT must be issued to.
    # At least one of the entries must match the "aud" claim in presented JWTs.
    audiences:
    - kcp # Same as --oidc-client-id.
    # this is required to be set to "MatchAny" when multiple audiences are specified.
    audienceMatchPolicy: MatchAny
  # rules applied to validate token claims to authenticate users.
  claimValidationRules:
  #   # Same as --oidc-required-claim key=value.
  # - claim: hd
  #   requiredValue: example.com
  #   # Instead of claim and requiredValue, you can use expression to validate the claim.
  #   # expression is a CEL expression that evaluates to a boolean.
  #   # all the expressions must evaluate to true for validation to succeed.
  # - expression: 'claims.hd == "example.com"'
  #   # Message customizes the error message seen in the API server logs when the validation fails.
  #   message: the hd claim must be set to example.com
  # - expression: 'claims.exp - claims.iat <= 86400'
  #   message: total token lifetime must not exceed 24 hours
  - expression: 'claims.email_verified == true'
    message: email_verified must be set to true
  claimMappings:
    # username represents an option for the username attribute.
    # This is the only required attribute.
    username:
      # Same as --oidc-username-claim. Mutually exclusive with username.expression.
      # claim: "email"
      # Same as --oidc-username-prefix. Mutually exclusive with username.expression.
      # if username.claim is set, username.prefix is required.
      # Explicitly set it to "" if no prefix is desired.
      # prefix: ""
      # Mutually exclusive with username.claim and username.prefix.
      # expression is a CEL expression that evaluates to a string.
      #
      # 1.  If username.expression uses 'claims.email', then 'claims.email_verified' must be used in
      #     username.expression or extra[*].valueExpression or claimValidationRules[*].expression.
      #     An example claim validation rule expression that matches the validation automatically
      #     applied when username.claim is set to 'email' is 'claims.?email_verified.orValue(true) == true'.
      #     By explicitly comparing the value to true, we let type-checking see the result will be a boolean, and
      #     to make sure a non-boolean email_verified claim will be caught at runtime.
      # 2.  If the username asserted based on username.expression is the empty string, the authentication
      #     request will fail.
      expression: 'claims.email + ":external-user"'
    # groups represents an option for the groups attribute.
    groups:
      # Same as --oidc-groups-claim. Mutually exclusive with groups.expression.
      # claim: "sub"
      # Same as --oidc-groups-prefix. Mutually exclusive with groups.expression.
      # if groups.claim is set, groups.prefix is required.
      # Explicitly set it to "" if no prefix is desired.
      # prefix: ""
      # Mutually exclusive with groups.claim and groups.prefix.
      # expression is a CEL expression that evaluates to a string or a list of strings.
      #expression: 'claims.roles.split(",")'
      expression: '"custom:reader"'
    # uid represents an option for the uid attribute.
    uid:
      # Mutually exclusive with uid.expression.
      claim: 'sub'
      # Mutually exclusive with uid.claim
      # expression is a CEL expression that evaluates to a string.
      # expression: 'claims.sub'
    # extra attributes to be added to the UserInfo object. Keys must be domain-prefix path and must be unique.
    # extra:
    #   # key is a string to use as the extra attribute key.
    #   # key must be a domain-prefix path (e.g. example.org/foo). All characters before the first "/" must be a valid
    #   # subdomain as defined by RFC 1123. All characters trailing the first "/" must
    #   # be valid HTTP Path characters as defined by RFC 3986.
    #   # k8s.io, kubernetes.io and their subdomains are reserved for Kubernetes use and cannot be used.
    #   # key must be lowercase and unique across all extra attributes.
    # - key: 'example.com/tenant'
    #   # valueExpression is a CEL expression that evaluates to a string or a list of strings.
    #   valueExpression: 'claims.tenant'
  # validation rules applied to the final user object.
  userValidationRules: []
  #   # expression is a CEL expression that evaluates to a boolean.
  #   # all the expressions must evaluate to true for the user to be valid.
  # - expression: "!user.username.startsWith('system:')"
  #   # Message customizes the error message seen in the API server logs when the validation fails.
  #   message: 'username cannot used reserved system: prefix'
  # - expression: "user.groups.all(group, !group.startsWith('system:'))"
  #   message: 'groups cannot used reserved system: prefix'
